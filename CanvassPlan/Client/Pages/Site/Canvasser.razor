@page "/site/canvasser/{SiteId:int}"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation


<h3>Assign to Canvasser</h3>


@if (ErrorMessage != null)
{
    <h5 class="text-danger">@ErrorMessage</h5>
}

<div class="container">

    @if (Canvassers != null)
    {
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Select a Canvasser</label>

                <InputSelect class="form-control" @bind-Value="model.CanvasserId">

                    @foreach (var canvasser in Canvassers)
                    {
                        if (canvasser.Inactive == false) { <option value="@canvasser.CanvasserId">@canvasser.Name</option> }
                    }
                </InputSelect>
                <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
            </div>
    </EditForm>
    }
</div>


@code {
    [Parameter]
    public int SiteId { get; set; }
    private List<CanvasserListItem> Canvassers;
    private CanvasserAddToSite model = new CanvasserAddToSite();
    private string ErrorMessage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Canvassers = await http.GetFromJsonAsync<List<CanvasserListItem>>("api/canvasser");
        model = await http.GetFromJsonAsync<CanvasserAddToSite>($"/api/site/{SiteId}");
    }
    private async void HandleSubmit()
    {
        var editRes = await http.PutAsJsonAsync<CanvasserAddToSite>($"/api/site/canvasser/{SiteId}", model);
        if (editRes.IsSuccessStatusCode) { navigation.NavigateTo($"/canvasser/{model.CanvasserId}"); }
        else { ErrorMessage = "Could not assign this site to the canvasser. The site may already be assigned to this canvasser."; }
    }
}