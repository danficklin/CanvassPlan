@page "/team/delete/{TeamId:int}"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation

<h3>Delete @Team.Name</h3>

@if (Message != null)
{
    <h2 class="text-danger">@Message</h2>
}
@if (Team != null)
{
    <div class="container">
        <div class="card">
            <div class="card-header d-flex justify-content-between">
                <span class="text-dark">@Team.Name</span>
                <span class="text-muted"><strong>ID: @Team.TeamId</strong></span>
            </div>
            <div class="card-body text-dark">
                @if(Team.Cars?.LastOrDefault() != default) {
                <h4 class="card-title text-dark">Assigned Car: @Team.Cars.LastOrDefault()?.Name</h4>
                } else { <p class="card-text text-dark"> No car currently assigned.</p> }
                @if(canvassersCount > 0)
                {
                    <h4 class="text-dark">Canvassers</h4> 
                    @foreach(CanvasserListItem c in Team.Canvassers)
                    {
                        <h4 class="text-dark">@c.Name</h4>
                    }
                } else { <p class="card-text text-dark">No canvassers currently assigned.</p> }
                @if (Team.IsActive == true) { <h4 class="card-title text-dark">This team is inactive. </h4> }
            </div>
            <div class="card-footer text-muted d-flex justify-content-between">
                <span class="text-left text-dark">Created: @Team.DateCreated</span>
                @if (Team.DateModified != null) { <span class="text-right text-dark">Last Changed: @Team.DateModified</span>}
            </div>
        </div>
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-50">
                <a href=@($"/team/{TeamId}") class="btn btn-outline-primary">Back to Details</a>
                <a href="#" @onclick="HandleClick" class="btn btn-danger text-white">Confirm Delete</a>
            </div>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int TeamId { get; set; }
    private TeamDetail Team = new TeamDetail();
    public string Message { get; set; }
    int canvassersCount;
    protected override async Task OnInitializedAsync()
    {
        Team = await http.GetFromJsonAsync<TeamDetail>($"/api/team/{TeamId}");
    }
    private async void HandleClick()
    {
        var deleteRes = await http.DeleteAsync($"/api/team/delete/{TeamId}");
        if(deleteRes.IsSuccessStatusCode) { navigation.NavigateTo("/team"); } 
        else { Message = "Failed to delete team. Please try again."; }
        canvassersCount = Team.Canvassers.Count;
    }
}