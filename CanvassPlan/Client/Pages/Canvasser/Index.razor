@page "/canvasser/"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation

<h3 class="text-primary" >Active Canvassers</h3>
<a class="text-success" href="/canvasser/create">Add a Canvasser   |</a>
<a class="text-danger" href="/canvasser/inactive">View Inactive Canvassers   |</a>
<a class="text-primary" href="/canvasser/driver">View Only Drivers   |</a>
<a class="text-info" href="/canvasser/leader">View Only Leaders   |</a>
<a class="text-secondary" href="/canvasser/trainee">View Only Trainees</a>

<hr />

<div class="row">
    <div class="col-md-3">
        <div class="form-check">
            <input class="form-check-input" type="checkbox" value="" id="hideAbsent" @onclick="@HideAbsent">
            <label class="form-check-label" for="hideAbsent">Hide Absent</label>
        </div>
    </div>
</div>

<hr />


@if (_canvassers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table text-white">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var canvasser in _canvassers)
            {
                if (!hideAbsentChecked)
                {
                    @if (canvasser.IsActive == false)
                    {
                        <tr>
                            <td>@canvasser.CanvasserId</td>
                            <td>@canvasser.Name</td>
                            <td>
                                <a href=@($"canvasser/{canvasser.CanvasserId}") class="btn btn-outline-info">Details</a>
                                <span style="width: 5px"></span>
                                <a href=@($"canvasser/edit/{canvasser.CanvasserId}") class="btn btn-outline-secondary">Edit</a>
                                <span style="width: 5px"></span>
                                <a class="btn btn-danger" @onclick="() => ToggleActive(canvasser)">Deactivate</a> 
                                <span style="width: 15px"></span>
                                 @if (canvasser.IsAbsent == false) { <a class="btn btn-success" @onclick="() => ToggleAbsent(canvasser)">Mark as Absent</a> }
                                 else if (canvasser.IsAbsent == true) { <a class="btn btn-outline-success" @onclick="() => ToggleAbsent(canvasser)">Mark as Present</a>}
                                
                            </td>
                        </tr>
                    }
                }
                else if (hideAbsentChecked)
                {
                    @if (canvasser.IsActive == false)
                    {
                        if (canvasser.IsAbsent == false)
                        {
                            <tr>
                                <td>@canvasser.CanvasserId</td>
                                <td>@canvasser.Name</td>
                                <td>
                                    <a href=@($"canvasser/{canvasser.CanvasserId}") class="btn btn-outline-info">Details</a>
                                    <a href=@($"canvasser/edit/{canvasser.CanvasserId}") class="btn btn-outline-secondary">Edit</a>
                                    <a href=@($"canvasser/delete/{canvasser.CanvasserId}") class="btn btn-outline-danger">Delete</a>
                                    <a class="btn btn-outline-danger" @onclick="() => ToggleActive(canvasser)">Deactivate</a>
                                    <a class="btn btn-outline-success" @onclick="() => ToggleAbsent(canvasser)">Mark as Absent</a>
                                </td>
                            </tr>
                            }
                        }
                    }
                }
        </tbody>
    </table>
}

@code {
    private List<CanvasserListItem> _canvassers;
    private string ErrorMessage { get;  set; }
    private bool hideAbsentChecked { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        _canvassers = await http.GetFromJsonAsync<List<CanvasserListItem>>("api/canvasser"); 

    }
    private async Task HideAbsent()
    {
        hideAbsentChecked = !hideAbsentChecked;
    }
    private async void ToggleAbsent(CanvasserListItem canvasser)
    {
        canvasser.IsAbsent = !canvasser.IsAbsent;
        var toggleRes = await http.PutAsJsonAsync<object>($"api/canvasser/absent/{canvasser.CanvasserId}", new());
        if(toggleRes.IsSuccessStatusCode) { navigation.NavigateTo($"/canvasser/"); }
        else { ErrorMessage = "Could not modify this canvasser. Please try again."; }
    }
    private async void ToggleActive(CanvasserListItem canvasser)
    {
        canvasser.IsActive = !canvasser.IsActive;
        var toggleRes = await http.PutAsJsonAsync<object>($"api/canvasser/active/{canvasser.CanvasserId}", new());
        if(toggleRes.IsSuccessStatusCode) { navigation.NavigateTo($"/canvasser/"); }
        else { ErrorMessage = "Could not modify this canvasser. Please try again."; }
    }
}
