@page "/canvasser/team/{CanvasserId:int}"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation


<h3>Add to Team</h3>


@if (ErrorMessage != null)
{
    <h5 class="text-danger">@ErrorMessage</h5>
}

<div class="container">

    @if (Teams != null)
    {
        <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>Select a Team</label>

                <InputSelect class="form-control" @bind-Value="model.TeamId">

                    @foreach (var team in Teams)
                    {
                        if (team.Inactive == false) { <option value="@team.TeamId">@team.TeamId - @team.Name</option> }
                    }
                </InputSelect>
                <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
            </div>
    </EditForm>
    }
</div>


@code {
    [Parameter]
    public int CanvasserId { get; set; }
    private List<TeamListItem> Teams;
    private CanvasserAddToTeam model = new CanvasserAddToTeam();
    private string ErrorMessage { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Teams = await http.GetFromJsonAsync<List<TeamListItem>>("api/team");
        model = await http.GetFromJsonAsync<CanvasserAddToTeam>($"/api/canvasser/{CanvasserId}");
    }
    private async void HandleSubmit()
    {
        var editRes = await http.PutAsJsonAsync<CanvasserAddToTeam>($"/api/canvasser/team/{CanvasserId}", model);
        if (editRes.IsSuccessStatusCode) { navigation.NavigateTo($"/team/{model.TeamId}"); }
        else { ErrorMessage = "Could add this canvasser to the team. Please try again."; }
    }
}
