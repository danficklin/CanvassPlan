@page "/generate/"
@attribute [Authorize]
@inject HttpClient http
@inject NavigationManager navigation

<h3>Generate Canvass Plan</h3>

<p>So far, this only generates a team for each active driver that is not absent, provided the number of teams does not exceed the number of cars.</p>


    <div class="container">
        <div class="d-flex justify-content-center mt-3">
            <div class="text-center justify-content-between w-50">
                <button @onclick="() => GeneratePlan()" class="btn btn-danger text-white">Generate Plan</button>
            </div>
        </div>
    </div>

@code {
    private List<CanvasserListItem> Canvassers;
    private List<CarListItem> Cars;
    private List<SiteListItem> Sites;
    private List<TeamListItem> Teams;
    private TeamCreate team = new();
    private CarAddToTeam car = new();
    private string message;
    Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        Canvassers = await http.GetFromJsonAsync<List<CanvasserListItem>>("api/canvasser"); 
        Cars = await http.GetFromJsonAsync<List<CarListItem>>("api/car"); 
        Sites = await http.GetFromJsonAsync<List<SiteListItem>>("api/site"); 
        Teams = await http.GetFromJsonAsync<List<TeamListItem>>("api/team"); 
    }


    private async void CreateTeamForEachPresentDriver()
    {
        bool CreateTeamSuccessful = false;
        int teamsMade = 0;
        int activeCars = 0;
        List<CanvasserListItem> Drivers = Canvassers.Where(c => c.IsDriver == true).ToList();
        foreach (var c in Cars)
        {
            if (c.IsActive == true)
            {
                activeCars++;
            }
        }
        while (teamsMade < activeCars)
        {
            var d = Drivers[random.Next(Drivers.Count)];
            if (d.IsDriver == true && d.IsActive == false && d.IsAbsent == false) 
            {
                team.Name = d.Name;
                teamsMade++;
                var createRes = await http.PostAsJsonAsync<TeamCreate>("/api/team", team);
                if (createRes.IsSuccessStatusCode) { CreateTeamSuccessful = true; }
                else { CreateTeamSuccessful = false; }
            }
            Drivers.Remove(d);
        }
    }

    //private async void AddCarToEachTeam()
    //{
    //    bool AddCarSuccessful = false;
    //    int carsAssigned = 0;
    //    List<CarListItem> ActiveCars = Cars.Where(a => a.IsActive == true).ToList();
    //    List<TeamListItem> ActiveTeams = Teams.Where(t => t.IsActive == true).ToList();
    //    while (carsAssigned < ActiveCars.Count)
    //    {
    //        var c = Cars[random.Next(ActiveCars.Count)];
    //        var t = Teams[random.Next(ActiveTeams.Count)];
    //        if (t.IsActive == true)
    //        {
    //            carsAssigned++;
    //            var addRes = await http.PostAsJsonAsync<CarAddToTeam>("/api/car/team", t.TeamId, car);
    //            if (addRes.IsSuccessStatusCode) { AddCarSuccessful = true; }
    //            else { AddCarSuccessful = false; }
    //        }
    //        ActiveCars.Remove(c);
    //        ActiveTeams.Remove(t);
    //    }
    //}

    private async void GeneratePlan()
    {
        bool AllSuccessful = false;

        CreateTeamForEachPresentDriver();
        //AddCarToEachTeam();
        //{

        //}

        //async void AddTraineesToTeams ()
        //{

        //}

        //asnyc void AddLeadersToTeams ()
        //{

        //}
        //if(CreateTeamSuccessful && AddCarSuccessful == true) { AllSuccessful = true; }
        AllSuccessful = true;
        if (AllSuccessful == true) 
        { 
        navigation.NavigateTo($"/team/"); 
        }
        else { message = "Could not generate a plan. Please try again later."; }
    }
}
